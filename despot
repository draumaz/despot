#!/bin/sh

# Copyright 2022 draumaz
# Distributed under the terms of the MIT license

case "$(id -u)" in 1000) echo "run despot as superuser"; exit ;; esac

DESPOT_VERSION="trunk:2022-07-13"

export BASE_DIR="/var/cache/despot"

basic_uninstall() {
  test -e "$1" || die 1
}

basic_sources_setup() {
  test -e "$PKG_TARBALL" || curl -fLO "$PKG_TARBALL_URL"
  tar -xpvf "$PKG_TARBALL"
}

basic_environment_setup() {
  mkdir -pv "$BASE_DIR"/work/"$PKG_TITLE"
  cd "$BASE_DIR"/work/"$PKG_TITLE"
  package_sources
  cd $PKG_TITLE-$PKG_VERSION
}

basic_environment_setup_nest() {
  mkdir -pv build
  cd build
}

basic_install_mini() {
  make install
}

basic_install() {
  make &&
  basic_install_mini &&
  cd ..
  rm -rf "$PKG_TITLE"
}

basic_install_cmake() {
  cmake . &&
  basic_install
}

basic_install_ninja() {
  meson .. &&
  ninja &&
  ninja install
}

RED="$(tput setaf 1)"
GREEN="$(tput setaf 2)"
YELLOW="$(tput setaf 3)"
PURPLE="$(tput setaf 5)"
WHITE="$(tput sgr0)"

test -e ${BASE_DIR}/repo/.git || \
  git clone https://github.com/draumaz/despot-repo "${BASE_DIR}/repo"

die() {
  case "$1" in
    1) echo "${RED}!!!!${WHITE}: package not installed"; exit ;;
    2) echo "${RED}!!!!${WHITE}: $2: missing dependency"; exit ;;
    3) echo "${RED}!!!!${WHITE}: argument missing"; exit ;;
    4) echo "${RED}!!!!${WHITE}: $2: no dbuild available"; exit ;;
    88) echo "${RED}!!!!${WHITE}: $PKG_TITLE: build failed"; exit ;;
    99) exit ;;
  esac
}

# determine what functions to use, else redirect to help screen
test $1 && PKG_LOCK="$1" || PKG_LOCK="help"

# meta text
case "$PKG_LOCK" in
  help | h)
    cat << EOF
./despot [arg] [...]

arguments:
help            | you're here now
install [pkg]   | install a package
list            | show installed packages
tug             | update repo database
uninstall [pkg] | uninstall a package
version         | show current version
EOF
    die 99 ;;
  version | v)
    echo "despot ${DESPOT_VERSION}"; die 99 ;;
esac

# determine repo, retrieve build functions
case "$PKG_LOCK" in "install" | "i" | "uninstall" | "u")
  LIVE_REPO="$(find $BASE_DIR/repo -type f -name '*.dbuild' | grep -i $2 | rev | cut -d / -f2 | rev)"
  test -e "$BASE_DIR"/repo/"$LIVE_REPO"/"$2".dbuild || die 4 "$2"
  echo "${GREEN}->${WHITE} reading ${PURPLE}$2${WHITE} dbuild from ${YELLOW}${LIVE_REPO}${WHITE}"
  . "$BASE_DIR"/repo/${LIVE_REPO}/${2}.dbuild
esac

# install process
case "$PKG_LOCK" in
  "install" | "i") 
    echo "\n\e[92m->\e[0m checking dependencies"
    echo "$DEB_DEPENDENCIES" | xargs apt-get install -y || \
    echo "$RPM_DEPENDENCIES" | xargs dnf install -y; \
    echo "\e[92m->\e[0m done\n"
    echo "\e[92m->\e[0m compiling: $PKG_TITLE"
    package_install && PKG_LOCK=0 &&
    echo "\e[92m->\e[0m installed: $PKG_TITLE" || die 88 ;;
  "tug" | "t") git pull; cd "$BASE_DIR" && git pull ;;
  "uninstall" | "u") 
    echo "-> uninstalling: \e[91m$PKG_TITLE\e[0m"
    package_uninstall &&
    echo "-> uninstalled:  \e[91m$PKG_TITLE\e[0m" || \
    echo "-> \e[91mbuild failed\e[0m: $PKG_TITLE"
    PKG_LOCK=1
    ;;
esac

cd "$BASE_DIR"

# environment cleanup
unset PKG_TITLE PKG_AUTHOR PKG_VERSION package_remove package_sources package_install
rm -rf "$BASE_DIR"/work
